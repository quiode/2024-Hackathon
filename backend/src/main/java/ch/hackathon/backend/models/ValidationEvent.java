package ch.hackathon.backend.models;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.proxy.HibernateProxy;

import java.time.Instant;
import java.util.LinkedHashSet;
import java.util.Objects;
import java.util.Set;

@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@Entity
public class ValidationEvent {

    @Id
    @GeneratedValue()
    @Column(name = "id", nullable = false)
    private Long id;

    @ManyToOne(optional = false, fetch = FetchType.EAGER)
    @JoinColumn(name = "card_id", nullable = false)
    private Card card;

    @Column(name = "percent_needed", nullable = false)
    private Double percentNeeded;

    @Column(name = "period_seconds", nullable = false)
    private Long periodSeconds;

    @Column(name = "start_time", nullable = false, unique = true)
    private Instant startTime;

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "ValidationEvent_users",
            joinColumns = @JoinColumn(name = "validationEvent_id"),
            inverseJoinColumns = @JoinColumn(name = "users_id"))
    private Set<User> clickedCard = new LinkedHashSet<>();





    /**
     * GENERATED BY INTELLIJ-SHIT, do not edit or try to understand xD
     */
    @Override
    public final boolean equals(Object o) {
        if (this == o) return true;
        if (o == null) return false;
        Class<?> oEffectiveClass = o instanceof HibernateProxy ? ((HibernateProxy) o).getHibernateLazyInitializer().getPersistentClass() : o.getClass();
        Class<?> thisEffectiveClass = this instanceof HibernateProxy ? ((HibernateProxy) this).getHibernateLazyInitializer().getPersistentClass() : this.getClass();
        if (thisEffectiveClass != oEffectiveClass) return false;
        ValidationEvent that = (ValidationEvent) o;
        return getId() != null && Objects.equals(getId(), that.getId());
    }

    /**
     * GENERATED BY INTELLIJ-SHIT, do not edit or try to understand xD
     */
    @Override
    public final int hashCode() {
        return this instanceof HibernateProxy ? ((HibernateProxy) this).getHibernateLazyInitializer().getPersistentClass().hashCode() : getClass().hashCode();
    }
}
