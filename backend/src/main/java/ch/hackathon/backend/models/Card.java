package ch.hackathon.backend.models;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.proxy.HibernateProxy;
import org.springframework.data.annotation.CreatedDate;

import java.time.Instant;
import java.util.LinkedHashSet;
import java.util.Objects;
import java.util.Set;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
/**
 * A Bingo `Card`, i.e. an entry in the Bingo (that was created as reference to
 * a lecture / prof)
 */
public class Card {
  @Id
  @GeneratedValue
  private Long id;

  @Column(nullable = false)
  private String text;

  @Column(nullable = false)
  @CreatedDate
  private Instant creationDate;



  /**
   * The user that designed this card
   */
  @ManyToOne(optional = false, fetch = FetchType.EAGER)
  @JoinColumn(name = "creator_id", nullable = false)
  private User creator;

  /**
   * We save all users that upvoted this post to
   * be able to prevent multiple upvotes
   */
  @ElementCollection
  @Column(name = "upvote")
  @CollectionTable(name = "Card_upvotes", joinColumns = @JoinColumn(name = "owner_id"))
  private Set<Long> upvotes = new LinkedHashSet<>();

  /**
   * We save all users that downvoted this post to
   * be able to prevent multiple downvotes
   */
  @ElementCollection
  @Column(name = "downvote")
  @CollectionTable(name = "Card_downvotes", joinColumns = @JoinColumn(name = "owner_id"))
  private Set<Long> downvotes = new LinkedHashSet<>();

  /**
   * Cards are always created for specific lectures
   */
  @ManyToOne(optional = false, fetch = FetchType.EAGER)
  @JoinColumn(name = "lecture_id", nullable = false)
  private Lecture lecture;

  /**
   * Cards are always references to a specific professors habits, words etc.
   */
  @ManyToOne(optional = false, fetch = FetchType.EAGER)
  @JoinColumn(name = "professor_id", nullable = false)
  private Professor professor;

  /**
   * GENERATED BY INTELLIJ-SHIT, do not edit or try to understand xD
   */
  @Override
  public final boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    Class<?> oEffectiveClass = o instanceof HibernateProxy ? ((HibernateProxy) o).getHibernateLazyInitializer().getPersistentClass() : o.getClass();
    Class<?> thisEffectiveClass = this instanceof HibernateProxy ? ((HibernateProxy) this).getHibernateLazyInitializer().getPersistentClass() : this.getClass();
    if (thisEffectiveClass != oEffectiveClass) return false;
    Card card = (Card) o;
    return getId() != null && Objects.equals(getId(), card.getId());
  }

  /**
   * GENERATED BY INTELLIJ-SHIT, do not edit or try to understand xD
   */
  @Override
  public final int hashCode() {
    return this instanceof HibernateProxy ? ((HibernateProxy) this).getHibernateLazyInitializer().getPersistentClass().hashCode() : getClass().hashCode();
  }
}
